====================================================================================================
Ch04-A Quick Tour
====================================================================================================
匹配语言算数运算
    tour/ExprJoyRide.java
    tour/Expr.g4
    tour/LibExpr.g4
    tour/CommonLexerRules.g4
计算器
    tour/LabeledExpr.g4         // antlr4  -no-listener  -visitor  LabeledExpr.g4
    tour/Calc.java
    tour/EvalVisitor.java    // 实现计算器的逻辑
接口生成器（输入为java类文件，生成接口文件）
    tour/Demo.java          // 用来作为输入
    tour/IDemo.java         // 输出的结果
    tour/ExtractInterfaceTool.java          // 运行程序，用ExtractInterfaceListener来walk语法树
    tour/ExtractInterfaceListener.java      // （关键程序）
获取(打印)文件的某一列(语义断言、或者叫语义谓词)
    tour/Col.java
    tour/Rows.g4
    tour/t.rows
类似于解码erlang外部格式的程序（数据包解码，同样使用语义谓词）
    tour/Data.g4 (不需要额外的java代码)
    tour/t.data
用词法模式（Lexical modes）来解析多种语言的文件（以XML为例）
    tour/XMLLexer.g4
    tour/t.xml //测试文件
用Rewriter（TokenStreamRewriter）来为文件插入信息（输入为java类文件，输出为带序列化ID的java类文件）
    tour/Java.g4
    tour/InsertSerialID
    tour/InsertSerialIDListener

====================================================================================================
Ch05-Designing Grammars
====================================================================================================
测试匹配字符串(比匹配注释更难哦)
    lexcial_test/StringTest.g4

====================================================================================================
Ch06-Exploring Some Real Grammars
====================================================================================================
解析CSV
    example/CSV.g4
JSON官网 http://json.org 提供的例子
    example/JSON.g4
    example/t.json
DOT语言(略)
    example/DOT.g4
Cymbol语言(略)
    example/Cymbol.g4
R语言(略)      这个例子有完整的十六进制和十进制转义字符的匹配规则
    example/R.g4
    example/t.R
    example/TestR.java

====================================================================================================
Ch07-Implementing Applications with Visitors
====================================================================================================
属性阅读器(listener版本)
    listeners/TestPropertyFile.java
    listeners/PropertyFile.g4
    listeners/t.properties
属性阅读器(vistor版本)     // 用antlr4 -visitor
    listeners/TestPropertyFileVisitor.java
    listeners/PropertyFile.g4
    listeners/t.properties
简单计算器(非Labeling版本)
    listeners/Expr.g4
    listeners/TestEvaluator.java
简单计算器(Labeling版本)   // 演示三种在Event Methods之间共享数据的方法
    listeners/LExpr.g4
    listeners/TestLEvaluator.java(基于Stack的实现,有点恶心)
    listeners/TestLEvalVisitor.java(Labeling,基于Visitor的返回值,直观且简单的实现)
    listeners/TestLEvaluatorWithProps.java(Labeling,直观且简单的实现)

====================================================================================================
Ch08-Building Some Real Language Applications
====================================================================================================
CSV Loader
    listeners/LoadCSV.java  // 开始的一行是header行
    listeners/CSV.g4
JSON to XML转换   // 每个退出事件的方法都定义了,转换器也就完成了!!!
    listeners/JSON.g4
    listeners/JSON2XML.java
    listeners/JSON2XML_DOM.java     // 未讲到
    listeners/JSON2XML_ST.java      // 未讲到
产生一个调用图(十分简单,包含两个例子)
    listeners/Cymbol.g4
    listeners/CallGraph.java
检查程序中符号使用的合法性(构建和使用符号表的基本方法)
    // 作用域
    listeners/BaseScope.java    // 看起来BaseScope已经实现了作用域的所有操作了
                                // GlobalScope和LocalScope没有必要存在,可以删除
                                // 然后再BaseScope中添加scopeName字段记录作用域的名字即可
    listeners/GlobalScope.java
    listeners/LocalScope.java
    // 符号
    listeners/Symbol.java
    listeners/FunctionSymbol.java   // 将resolve和define操作放在这里貌似有一点不合理!
                                    // 作者之所有这么做,应该是因为函数的参数也在作用域中
    listeners/VariableSymbol.java
    // 用同一个walker遍历两次语法分析树(用不不同的listener)
    //第一次定义所有的符号,第二次resolve所有的符号
    listeners/CheckSymbols.java
    listeners/DefPhase.java
    listeners/RefPhase.java     // enterFunctionDecl和exitFunctionDecl这么神来之笔般的简单
                                // 在于函数声明的的作用域,在注释语法树中,作为函数声明节点被annotated了
                                // 而两次遍历用同一个walker,保证节点被访问的顺序是相同的

====================================================================================================
Ch09-Error Reporting and Recovery
====================================================================================================
错误演示
    errors/Simple.g4
更换错误处理listener
    errors/TestE_Listener.java      // 打印错误规则栈的信息
    errors/TestE_Listener2.java     // 命令行上更友好的报错信息
    errors/TestE_Dialog.java
following集合演示,注意antlr4的following跟其他编译器的FOLLOW集合是不同的
    errors/F.g4                     // 同步词法单元是 调用栈里面所有规则的following集合 的并集!!!!!!!!!!
error alternatives的演示
    errors/Simple.g4
语义谓词的错误处理
    errors/Vec.g4                   // 语义谓词的默认错误信息
    errors/VecMsg.g4                // 自定义语义谓词的错误信息
错误规则
    errors/Call.g4                  // 错误规则,匹配常见的错误,提供更友好的错误提示
变更antlr的错误处理策略
    errors/BailErrorStrategy.java   // 自定义的错误处理策略类
    errors/Simple.g4
    errors/TestBail.java            // 测试自定义策略类

====================================================================================================
Ch10-Attributes and Actions 属性和与语义动作
====================================================================================================
可以先从第四章的Rows.g4和Data.g4看看Attributes、Action和语义谓词的使用
用属性和语义动作实现的计算器
    actions/tools/Calc.java
    actions/tools/Expr.g4
    // antlr4 -no-listener tools/Expr.g4
    // javac -d . tools/*.java #以当前目录为根目录,在java文件声明的包中生成*.class
    // java tools.Calc
用属性和语义动作实现CSVLoader
    actions/CSV.g4
    $  antlr4  -no-listener  CSV.g4     #  again,  we  won't  use  a  listener
    $  javac  CSV*.java
    $  grun  CSV  file  users.csv       # 记住使用grun使用file选项指定输入文件
识别关键字不是固定的语言(比如java5添加了enum的支持,编译器可以用-version来指定是否支持第五版的新特性)
    actions/Keywords.g4

====================================================================================================
Ch11-Altering the Parse with Semantic Predicates用语义谓词变更解析
====================================================================================================
识别不同的方言,例子1,在语法分析器中使用语义谓词
    predicates/Enum.g4
    predicates/TestEnum.java
识别不同的方言,例子2,在词法分析器中使用语义谓词(解决和上面例子一样的问题)
    predicates/Enum2.g4
    // 这个例子更适合在词法分析器中使用语义谓词,因为这样的话就可以简化语法分析器,比如不用定义额外的规则id
    predicates/TestEnum2.java
解决二义性的两个例子(这两个例子并不是完整的,只是提供了思路,可以在git上看完整的Cpp.g4)
    predicates/CppExpr.g4
    predicates/CppStat.g4

====================================================================================================
Ch12-Wielding Lexical Black Magic运用词法分析的黑魔法(解决一些很有意义的难题)
====================================================================================================
使用不同的channel,用TokenStreamRewriter来重写token流
    lexmagic/ShiftVarComments.java
    lexmagic/Cymbol.g4
将关键字当做标识符来处理
    lexmagic/IDKeyword.g4   // 相当巧妙的处理，只需要将特定的单词作为和词法规则ID组合成parser规则id即可



